#-------------------------------------------------------------------------------
#Copyright MODUS DATISI
#-------------------------------------------------------------------------------


#PLEASE DO NOT EDIT ANYTHING BELOW THIS LINE
#-------------------------------------------------------------------------------
include (mdatisi-lib.txt)

#Sets all the project paths 
get_filename_component(MD_LIBRARY_ROOT_PATH ".." ABSOLUTE)
set(MD_LIBRARY_DOC_PATH     "${MD_LIBRARY_ROOT_PATH}/doc")
set(MD_LIBRARY_INCLUDE_PATH "${MD_LIBRARY_ROOT_PATH}/include")
set(MD_LIBRARY_LIB_PATH     "${MD_LIBRARY_ROOT_PATH}/lib")
set(MD_LIBRARY_PROJECT_PATH "${MD_LIBRARY_ROOT_PATH}/project")
set(MD_LIBRARY_SRC_PATH     "${MD_LIBRARY_ROOT_PATH}/src")
set(MD_LIBRARY_TEST_PATH    "${MD_LIBRARY_ROOT_PATH}/test")
set(MD_LIBRARY_TOOLS_PATH   "${MD_LIBRARY_ROOT_PATH}/tools")
#TODO : Check existence of the directories


message("__________________________________________________")
message("Modus Datisi CMake file for ${MD_LIBRARY_NAME} library")
message("__________________________________________________")


#CMAKE configuration
message("CMake configuration")
message("-------------------") 
set(MD_CMAKE_MINIMUM_VERSION_REQUIRED 2.8)
message("Minimum CMake version required : ${MD_CMAKE_MINIMUM_VERSION_REQUIRED}")
message("Actual  CMake version          : ${CMAKE_VERSION}")
cmake_minimum_required(VERSION ${MD_CMAKE_MINIMUM_VERSION_REQUIRED})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMakeModules/")
message("System information")
message("------------------")
message("CMAKE_SYSTEM           : ${CMAKE_SYSTEM}")
message("CMAKE_SYSTEM_NAME      : ${CMAKE_SYSTEM_NAME}")
message("CMAKE_SYSTEM_VERSION   : ${CMAKE_SYSTEM_VERSION}")
message("CMAKE_SYSTEM_PROCESSOR : ${CMAKE_SYSTEM_PROCESSOR}")

#High-level project settings
project(${MD_LIBRARY_NAME})
set(MD_LIBRARY_NAMESPACE ${MD_LIBRARY_NAME})




set (MD_CONFIG_WARNING 
     "WARNING!! This file was autogenerated. Please do not edit manually!!")
   
set (MD_INCLUDE_PREFIX MD_MDLT)

option (USE_MYFUNC
        "Use myfunc"
        OFF)

# x Feature checks

# Compiler settings
set (CMAKE_CXX_FLAGS "-std=c++11")

# Source files
file(GLOB_RECURSE source_files ../src/*.cpp ../src/*.cxx)
file(GLOB_RECURSE library_include_files ../include/*.hpp ../include/*.h)
#Header files


#Library version

# Build options
configure_file ("./config/version.hpp.in" "../include/version.hpp")
configure_file ("./config/version.hxx.in" "../src/version.hxx")
configure_file ("./config/version.cpp.in" "../src/version.cpp")
configure_file ("./config/version.cxx.in" "../src/version.cxx")

set(LIBRARY_OUTPUT_PATH ../lib)
add_library( mdlt SHARED ${source_files})
add_library( mdlt_static ${source_files})
set(MD_LIBRARY_VERSION ${MD_LIBRARY_VERSION_MAJOR}.${MD_LIBRARY_VERSION_MINOR}.${MD_LIBRARY_VERSION_PATCH})
set_target_properties(mdlt PROPERTIES VERSION ${MD_LIBRARY_VERSION} SOVERSION ${MD_LIBRARY_VERSION_MAJOR})

set_target_properties(mdlt_static PROPERTIES VERSION ${MD_LIBRARY_VERSION})
set_target_properties(mdlt_static PROPERTIES OUTPUT_NAME mdlt-${MD_LIBRARY_VERSION})
target_link_libraries(mdlt stdc++ )
target_link_libraries(mdlt_static stdc++)


#Linux Kernel
EXECUTE_PROCESS(COMMAND uname -r OUTPUT_VARIABLE os_release OUTPUT_STRIP_TRAILING_WHITESPACE)
message("Linux Kernel : ${os_release}")


#  Installation.
#install (DIRECTORY ${MD_LIBRARY_INCLUDE_PATH} DESTINATION include/mdatisi/${MD_LIBRARY_NAME})
#install (FILES ../include/sampleclass.hpp DESTINATION include/mdatisi/mdlt)
#install (FILES ../include/version.hpp DESTINATION include/mdatisi/mdlt)
#install (FILES ../lib/libmdlt.so DESTINATION /usr/local/lib)
install (TARGETS mdlt DESTINATION lib 
         PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)
install (TARGETS mdlt_static DESTINATION ../lib
         PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)


install (FILES ${library_include_files} DESTINATION include/mdatisi/mdlt
         PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

# Testing
if (MD_ENABLE_TESTING)
    enable_testing()
    add_executable(mdlt_test1 ../test/main.cpp)
    target_link_libraries(mdlt_test1 mdlt)

    add_test(mytest mdlt_test1 "This is my first test")
endif()

#find_package(check REQUIRED)

#Use of CPACK
include (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE "../COPYING")
set (CPACK_PACKAGE_VERSION_MAJOR "${MD_LIBRARY_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${MD_LIBRARY_VERSION_MINOR}")
include (CPack)
#------------------------------------------------------------------------------------------------------------------------------
